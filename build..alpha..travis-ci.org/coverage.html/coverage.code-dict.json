{"/home/travis/build/npmtest/node-npmtest-static-server/test.js":"/* istanbul instrument in package npmtest_static_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-static-server/lib.npmtest_static_server.js":"/* istanbul instrument in package npmtest_static_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_static_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_static_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-static-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-static-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_static_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_static_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_static_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_static_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_static_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_static_server.__dirname + '/lib.npmtest_static_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-static-server/node_modules/static-server/server.js":"\nconst DEFAULT_INDEX = 'index.html';\n\nconst HTTP_STATUS_OK = 200;\nconst HTTP_STATUS_PARTIAL_CONTENT = 206;\nconst HTTP_STATUS_NOT_MODIFIED = 304;\nconst HTTP_STATUS_ERR = 500;\nconst HTTP_STATUS_BAD_REQUEST = 400;\nconst HTTP_STATUS_FORBIDDEN = 403;\nconst HTTP_STATUS_NOT_FOUND = 404;\nconst HTTP_STATUS_INVALID_METHOD = 405;\nconst HTTP_STATUS_REQUEST_RANGE_NOT_SATISFIABLE = 416;\n\nconst VALID_HTTP_METHODS = ['GET', 'HEAD'];\n\nconst RANGE_REQUEST_HEADER_TEST = /^bytes=/;\nconst RANGE_REQUEST_HEADER_PATTERN = /\\d*-\\d*/g;\n\nconst TIME_MS_PRECISION = 3;\n\nconst MULTIPART_SEPARATOR = '--MULTIPARTSEPERATORaufielqbghgzwr';\n\nconst NEWLINE = '\\n';\n\n\nvar EventEmitter = require('events').EventEmitter;\nvar util         = require('util');\nvar http         = require('http');\nvar url          = require('url');\nvar mime         = require('mime');\nvar path         = require('path');\nvar fs           = require('fs');\nvar slice        = Array.prototype.slice;\n\n\n/**\nExposes the StaticServer class\n*/\nmodule.exports = StaticServer;\n\n\n/**\nCreate a new instance of StaticServer class\n\nOptions are :\n   - name          the server name, what will be sent as \"X-Powered-by\"\n   - host          the host interface where the server will listen to. If not specified,\n                   the server will listen on any networking interfaces\n   - cors          a cors header, will be sent as \"Access-Control-Allow-Origin\",\n   - port          the listening port number\n   - rootPath      the serving root path. Any file above that path will be denied\n   - followSymlink true to follow any symbolic link, false to forbid\n   - templates\n      - index      the default index file to server for a directory (default 'index.html')\n      - notFound   the 404 error template\n\n@param options {Object}\n*/\nfunction StaticServer(options) {\n  options = options || {};\n\n  if (!options.rootPath) {\n    throw new Error('Root path not specified');\n  }\n\n  if(!options.templates){\n    options.templates = {};\n  }\n\n  this.name = options.name;\n  this.host = options.host;\n  this.port = options.port;\n  this.cors = options.cors;\n  this.rootPath = path.resolve(options.rootPath);\n  this.followSymlink = !!options.followSymlink;\n  this.templates = {\n    'index': (options.templates.index || DEFAULT_INDEX),\n    'notFound': options.templates.notFound\n  };\n\n  if (options.index) {\n    console.log(\"options.index is now deprecated please use options.templates.index instead.\");\n    this.templates.index = options.index;\n  }\n\n  Object.defineProperty(this, '_socket', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: null\n  });\n\n}\nutil.inherits(StaticServer, EventEmitter);\n\n/**\nExpose the http.STATUS_CODES object\n*/\nStaticServer.STATUS_CODES = http.STATUS_CODES;\n\n\n/**\nStart listening on the given host:port\n\n@param callback {Function}    the function to call once the server is ready\n*/\nStaticServer.prototype.start = function start(callback) {\n  this._socket = http.createServer(requestHandler(this)).listen(this.port, this.host, callback);\n}\n\n\n/**\nStop listening\n*/\nStaticServer.prototype.stop = function stop() {\n  if (this._socket) {\n    this._socket.close();\n    this._socket = null;\n  }\n}\n\n\n/**\nReturn the server's request handler function\n\n@param server {StaticServer}  server instance\n@return {Function}\n*/\nfunction requestHandler(server) {\n  return function handler(req, res) {\n    var uri = req.path = url.parse(req.url).pathname;\n    var filename = path.join(server.rootPath, uri);\n    var timestamp = process.hrtime();\n\n    // add a property to get the elapsed time since the request was issued\n    Object.defineProperty(req, 'elapsedTime', {\n      get: function getElapsedTime() {\n        var elapsed = process.hrtime(timestamp);\n        return (elapsed[0] ? elapsed[0] + 's ' : '') + (elapsed[1] / 1000000).toFixed(TIME_MS_PRECISION) + 'ms';\n      }\n    });\n\n    res.headers = {};\n    if (server.name) {\n      res.headers['X-Powered-By'] = server.name;\n    }\n\n    if (server.cors) {\n      res.headers['Access-Control-Allow-Origin'] = server.cors;\n    }\n\n    server.emit('request', req);\n\n    if (VALID_HTTP_METHODS.indexOf(req.method) === -1) {\n      return sendError(server, req, res, null, HTTP_STATUS_INVALID_METHOD);\n    } else if (!validPath(server.rootPath, filename)) {\n      return sendError(server, req, res, null, HTTP_STATUS_FORBIDDEN);\n    }\n\n    getFileStats(server, [filename, path.join(filename, server.templates.index)], function (err, stat, file, index) {\n      if (err) {\n        handleError(server, req, res, err);\n      } else if (stat.isDirectory()) {\n        //\n        // TODO : handle directory listing here\n        //\n        sendError(server, req, res, null, HTTP_STATUS_FORBIDDEN);\n      } else {\n        sendFile(server, req, res, stat, file);\n      }\n    });\n  };\n}\n\n\n/**\nHandle an error\n\nCurrently assumes that the only error would be a 404 error.\n\n@param server {StaticServer} server instance\n@param req {Object} request Object\n@param res {Object} response Object\n@param err {Object} the error to handle\n*/\nfunction handleError(server, req, res, err){\n  if(server.templates.notFound){\n    getFileStats(server, [server.templates.notFound], function(err, stat, file, index){\n      if (err) {\n        sendError(server, req, res, null, HTTP_STATUS_NOT_FOUND);\n      } else {\n        res.status = HTTP_STATUS_NOT_FOUND;\n        sendFile(server, req, res, stat, file);\n      }\n    });\n  }else{\n    sendError(server, req, res, null, HTTP_STATUS_NOT_FOUND);\n  }\n}\n\n\n\n/**\nCheck that path is valid so we don't access invalid resources\n\n@param rootPath {String}    the server root path\n@param file {String}        the path to validate\n*/\nfunction validPath(rootPath, file) {\n  var resolvedPath = path.resolve(rootPath, file);\n\n  // only if we are still in the rootPath of the static site\n  return resolvedPath.indexOf(rootPath) === 0;\n}\n\n\n/**\nGet stats for the given file(s). The function will return the stats for the\nfirst valid (i.e. found) file or directory.\n\n    getFile(server, ['file1', 'file2'], callback);\n\nThe callback function receives four arguments; an error if any, a stats object,\nthe file name matching the stats found, and the actual index of the file from\nthe provided list of files.\n\n@param server {StaticServer}    the StaticServer instance\n@param files {Array}            list of files\n@param callback {Function}      a callback function\n*/\nfunction getFileStats(server, files, callback) {\n  var dirFound;\n  var dirStat;\n  var dirIndex;\n\n  function checkNext(err, index) {\n    if (files.length) {\n      next(files.shift(), index + 1);\n    } else if (dirFound) {\n      // if a directory was found at some point, return it and ignore the error\n      callback(null, dirStat, dirFound, dirIndex);\n    } else {\n      callback(err || new Error('File not found'));\n    }\n  }\n\n  function next(file, index) {\n    fs.lstat(file, function (err, stat) {\n      if (err) {\n        checkNext(err, index);\n      } else if (stat.isSymbolicLink()) {\n        if (server.followSymlink) {\n          fs.readlink(file, function (err, fileRef) {\n            if (err) {\n              checkNext(err, index);\n            } else {\n              if (!path.isAbsolute(fileRef)) {\n                fileRef = path.join( path.dirname(file), fileRef );\n              }\n              server.emit('symbolicLink', fileRef);\n              next(fileRef, index);\n            }\n          });\n        } else {\n          callback(new Error('Symbolic link not allowed'));\n        }\n      } else if (stat.isDirectory()) {\n        if (!dirFound) {\n          dirFound = file;\n          dirStat = stat;\n          dirIndex = index;\n        }\n        checkNext(null, index);\n      } else {\n        callback(null, stat, file, index);\n      }\n    });\n  }\n\n  checkNext(null, 0);\n}\n\n\n/**\nValidate that this file is not client cached\n\n@param req {Object}       the request object\n@param res {Object}       the response object\n@return {boolean}         true if the file is client cached\n*/\nfunction validateClientCache(server, req, res, stat) {\n  var mtime         = stat.mtime.getTime();\n  var clientETag  = req.headers['if-none-match'];\n  var clientMTime = Date.parse(req.headers['if-modified-since']);\n\n  if ((clientMTime  || clientETag) &&\n      (!clientETag  || clientETag === res.headers['Etag']) &&\n      (!clientMTime || clientMTime >= mtime)) {\n\n    // NOT MODIFIED responses should not contain entity headers\n    [\n      'Content-Encoding',\n      'Content-Language',\n      'Content-Length',\n      'Content-Location',\n      'Content-MD5',\n      'Content-Range',\n      'Content-Type',\n      'Expires',\n      'Last-Modified'\n    ].forEach(function(entityHeader) {\n        delete res.headers[entityHeader];\n    });\n\n    res.status = HTTP_STATUS_NOT_MODIFIED;\n\n    res.writeHead(res.status, res.headers);\n    res.end();\n\n    server.emit('response', req, res);\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction parseRanges(req, res, size) {\n  var ranges;\n  var start;\n  var end;\n  var i;\n  var originalSize = size;\n\n  // support range headers\n  if (req.headers.range) {\n    // 'bytes=100-200,300-400'  --> ['100-200','300-400']\n    if (!RANGE_REQUEST_HEADER_TEST.test(req.headers.range)) {\n      return sendError(req, res, null, HTTP_STATUS_BAD_REQUEST, 'Invalid Range Headers: ' + req.headers.range);\n    }\n\n    ranges = req.headers.range.match(RANGE_REQUEST_HEADER_PATTERN);\n    size = 0;\n\n    if (!ranges) {\n      return sendError(server, req, res, null, HTTP_STATUS_BAD_REQUEST, 'Invalid Range Headers: ' + req.headers.range);\n    }\n\n    i = ranges.length;\n\n    while (--i >= 0) {\n      // 100-200 --> [100, 200]   = bytes 100 to 200\n      // -200    --> [null, 200]  = last 100 bytes\n      // 100-    --> [100, null]  = bytes 100 to end\n      range = ranges[i].split('-');\n      start = range[0] ? Number(range[0]) : null;\n      end   = range[1] ? Number(range[1]) : null;\n\n      // check if requested range is valid:\n      //   - check it is within file range\n      //   - check that start is smaller than end, if both are set\n\n      if ((start > originalSize) || (end > originalSize) || ((start && end) && start > end)) {\n        res.headers['Content-Range'] = 'bytes=0-' + originalSize;\n        return sendError(server, req, res, null, DEFAULT_STATUS_REQUEST_RANGE_NOT_SATISFIABLE);\n      }\n\n      // update size\n      if (start !== null && end !== null) {\n        size += (end - start);\n        ranges[i] = { start: start, end: end + 1 };\n      } else if (start !== null) {\n        size += (originalSize - start);\n        ranges[i] = { start: start, end: originalSize + 1 };\n      } else if (end !== null) {\n        size += end;\n        ranges[i] = { start: originalSize - end, end: originalSize };\n      }\n    }\n  }\n\n  return {\n    ranges: ranges,\n    size: size\n  };\n}\n\n\n/**\nSend error back to the client. If `status` is not specified, a value\nof 500 is used. If `message` is not specified, the default message for\nthe given status is returned.\n\n@param server {StaticServer} the server instance\n@param req {Object}          the request object\n@param res {Object}          the response object\n@param err {Object}          an Error object, if any\n@param status {Number}       the status (default 500)\n@param message {String}      the status message (optional)\n*/\nfunction sendError(server, req, res, err, status, message) {\n  status = status || res.status || HTTP_STATUS_ERR\n  message = message || http.STATUS_CODES[status];\n\n  if (status >= 400) {\n    // ERR responses should not contain entity headers\n    [\n      'Content-Encoding',\n      'Content-Language',\n      'Content-Length',\n      'Content-Location',\n      'Content-MD5',\n      //      'Content-Range', // Error 416 SHOULD contain this header\n      'Etag',\n      'Expires',\n      'Last-Modified'\n    ].forEach(function(entityHeader) {\n        delete res.headers[entityHeader];\n    });\n\n    res.status = status;\n    res.headers['Content-Type'] = mime.lookup('text');\n\n    res.writeHead(status, res.headers);\n    res.write(message);\n    res.end();\n  }\n\n  server.emit('response', req, res, err);\n}\n\n\n/**\nSend a file back at the client. If the file is not found, an error 404\nwill be returned. If the file cannot be read, for any reason, an error 500\nwill be read and the error will be sent to stderr\n\n@param server {StaticServer} the server instance\n@param req {Object}          the request object\n@param res {Object}          the response object\n@param stat {Object}         the actual file stat\n@param file {String}         the absolute file path\n*/\nfunction sendFile(server, req, res, stat, file) {\n  var headersSent = false;\n  var contentParts = parseRanges(req, res, stat.size);\n  var streamOptions = { flags: 'r' };\n  var contentType = mime.lookup(file);\n  var rangeIndex = 0;\n\n  if (!contentParts) {\n    return;  // ranges failed, abort\n  }\n\n  res.headers['Etag']           = JSON.stringify([stat.ino, stat.size, stat.mtime.getTime()].join('-'));\n  res.headers['Date']           = new Date().toUTCString();\n  res.headers['Last-Modified']  = new Date(stat.mtime).toUTCString();\n\n  if (contentParts.ranges && contentParts.ranges.length > 1) {\n    res.headers['Content-Type'] = 'multipart/byteranges; boundary=' + MULTIPART_SEPARATOR;\n  } else {\n    res.headers['Content-Type']   = contentType;\n    res.headers['Content-Length'] = contentParts.size;\n\n    if (contentParts.ranges) {\n      res.headers['Content-Range'] = req.headers.range;\n    }\n  }\n\n  // return only headers if request method is HEAD\n  if (req.method === 'HEAD') {\n    res.status = HTTP_STATUS_OK;\n    res.writeHead(HTTP_STATUS_OK, res.headers);\n    res.end();\n    server.emit('response', req, res, null, file, stat);\n  } else if (!validateClientCache(server, req, res, stat, file)) {\n\n    (function sendNext() {\n      var range;\n\n      if (contentParts.ranges) {\n        range = contentParts.ranges[rangeIndex++];\n\n        streamOptions.start = range.start;\n        streamOptions.end = range.end;\n      }\n\n      fs.createReadStream(file, streamOptions)\n        .on('close', function () {\n          // close response when there are no ranges defined\n          // or when the last range has been read\n          if (!range || (rangeIndex >= contentParts.ranges.length)) {\n            res.end();\n            server.emit('response', req, res, null, file, stat);\n          } else {\n            setImmediate(sendNext);\n          }\n        }).on('open', function (fd) {\n          if (!headersSent) {\n            if (!res.status){\n              if (range) {\n                res.status = HTTP_STATUS_PARTIAL_CONTENT;\n              } else {\n                res.status = HTTP_STATUS_OK;\n              }\n            }\n            res.writeHead(res.status, res.headers);\n            headersSent = true;\n          }\n\n          if (range && contentParts.ranges.length > 1) {\n            res.write(MULTIPART_SEPARATOR + NEWLINE +\n                      'Content-Type: ' + contentType + NEWLINE +\n                      'Content-Range: ' + (range.start || '') + '-' + (range.end || '') + NEWLINE + NEWLINE);\n          }\n        }).on('error', function (err) {\n          sendError(server, req, res, err);\n        }).on('data', function (chunk) {\n          res.write(chunk);\n        });\n    })();\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-static-server/node_modules/static-server/bin/static-server.js":"#!/usr/bin/env node\n\nconst DEFAULT_PORT = 9080;\nconst DEFAULT_INDEX = 'index.html';\nconst DEFAULT_FOLLOW_SYMLINKS = false;\nconst DEFAULT_DEBUG = false;\nconst DEFAULT_ERROR_404 = undefined;\n\n\nvar path    = require(\"path\");\nvar fsize   = require('file-size');\nvar program = require('commander');\nvar chalk   = require('chalk');\n\nvar pkg     = require(path.join(__dirname, '..', 'package.json'));\n\nvar StaticServer = require('../server.js');\nvar server;\n\nvar templates = {};\n\ninitTerminateHandlers();\n\nprogram\n  .version(pkg.name + '@' + pkg.version)\n  .usage('[options] <root_path>')\n  .option('-p, --port <n>', 'the port to listen to for incoming HTTP connections', DEFAULT_PORT)\n  .option('-i, --index <filename>', 'the default index file if not specified', addIndexTemplate, DEFAULT_INDEX)\n  .option('-f, --follow-symlink', 'follow links, otherwise fail with file not found', DEFAULT_FOLLOW_SYMLINKS)\n  .option('-d, --debug', 'enable to show error messages', DEFAULT_DEBUG)\n  .option('-n, --not-found <filename>', 'the file not found template', addNotFoundTemplate, DEFAULT_ERROR_404)\n  .parse(process.argv);\n;\n\n// overrides\nprogram.rootPath = program.args[0] || process.cwd();\nprogram.name = pkg.name;\nprogram.templates = templates;\n\nserver = new StaticServer(program);\n\nserver.start(function () {\n  console.log(chalk.blue('*'), 'Static server successfully started.');\n  console.log(chalk.blue('*'), 'Serving files at:', chalk.cyan('http://localhost:' + program.port));\n  console.log(chalk.blue('*'), 'Press', chalk.yellow.bold('Ctrl+C'), 'to shutdown.');\n\n  return server;\n});\n\nserver.on('request', function (req, res) {\n  console.log(chalk.gray('<--'), chalk.blue('[' + req.method + ']'), req.path);\n});\n\nserver.on('symbolicLink', function (link, file) {\n  console.log(chalk.cyan('---'), '\"' + path.relative(server.rootPath, link) + '\"', chalk.magenta('>'), '\"' + path.relative(server.rootPath, file) + '\"');\n});\n\nserver.on('response', function (req, res, err, file, stat) {\n  var relFile;\n  var nrmFile;\n\n  if (res.status >= 400) {\n    console.log(chalk.gray('-->'), chalk.red(res.status), req.path, '(' + req.elapsedTime + ')');\n  } else if (file) {\n    relFile = path.relative(server.rootPath, file);\n    nrmFile = path.normalize(req.path.substring(1));\n\n    console.log(chalk.gray('-->'), chalk.green(res.status, StaticServer.STATUS_CODES[res.status]), req.path + (nrmFile !== relFile ? (' ' + chalk.dim('(' + relFile + ')')) : ''), fsize(stat.size).human(), '(' + req.elapsedTime + ')');\n  } else {\n    console.log(chalk.gray('-->'), chalk.green.dim(res.status, StaticServer.STATUS_CODES[res.status]), req.path, '(' + req.elapsedTime + ')');\n  }\n\n  if (err && server.debug) {\n    console.error(err.stack || err.message || err);\n  }\n\n});\n\n\n\n/**\nPrepare the 'exit' handler for the program termination\n*/\nfunction initTerminateHandlers() {\n  var readLine;\n\n  if (process.platform === \"win32\"){\n    readLine = require(\"readline\");\n\n    readLine.createInterface ({\n      input: process.stdin,\n      output: process.stdout\n    }).on(\"SIGINT\", function () {\n      process.emit(\"SIGINT\");\n    });\n  }\n\n  // handle INTERRUPT (CTRL+C) and TERM/KILL signals\n  process.on('exit', function () {\n    if (server) {\n      console.log(chalk.blue('*'), 'Shutting down server');\n      server.stop();\n    }\n    console.log();  // extra blank line\n  });\n  process.on('SIGINT', function () {\n    console.log(chalk.blue.bold('!'), chalk.yellow.bold('SIGINT'), 'detected');\n    process.exit();\n  });\n  process.on('SIGTERM', function () {\n    console.log(chalk.blue.bold('!'), chalk.yellow.bold('SIGTERM'), 'detected');\n    process.exit(0);\n  });\n}\n\nfunction addNotFoundTemplate(v){\n  templates.notFound = v;\n}\n\nfunction addIndexTemplate(v){\n  templates.index = v;\n}\n"}